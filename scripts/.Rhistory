ThreemulInsertionsPlot,
RNAstrAndsgRNAs_together,
ncol =1,
align = "v",
labels = c("c","","d"),
heights = c(0.55,1,0.4),
common.legend = F,
legend = "right")
#Build top and bottom parts
Figure1_top<-ggarrange(NULL,Insertions_length_distribution, NULL,
labels=c("a","",""),
ncol = 3,
widths = c(0.1,1,0.25))
Figure1_middle<-ggarrange(NULL,NucleotidesCounts,NULL,
ncol =3,
widths = c(0.3,1,0.3),
labels = c("","b",""))
Figure1_Simulations<-ggarrange(DistanceToJunction,
InsertionsInStemsPlot,
ncol =2,
widths = c(1, 0.6),
labels = c("e","f"))
#Combine all in one figure
Figure1_full<-ggarrange(Figure1_top,
Figure1_middle,
Figure1_bottom,
Figure1_Simulations,
ncol =1,
heights = c(0.3,0.25, 1, 0.3))
Figure1_full
#Save figure
ggsave("../figures/Figure1.svg", plot= Figure1_full,
width = 26, height = 34.5, dpi =600, units ="cm")
#Investigation of insertion mechanisms
######
#For 25 long insertions map their origin where known
Long_insertions_verified<-subset(Long_insertions, Long_insertions$Fill != "Singleton")
Long_insertions_verified<-separate(data = Long_insertions_verified, col = Origin_position, into = c("Origin_position", "OP2"), sep = ";")
Mechanism_plotDf<-Long_insertions_verified %>%
group_by(Position) %>% dplyr::mutate(num = 1:n())
##Plot origin
Mechanism_plot<-ggplot(data=Mechanism_plotDf)+
geom_vline(aes(xintercept = Position), linetype = "dashed", color = "#d9d9d9",
alpha=0.5)+
geom_point(aes(x = Position,
size =Length2,
y = num,
fill = Fill),
shape = 25,
color = "black",
alpha =0.7)+
scale_size(breaks = c(9,12,15,21),labels = c(9,12,15,21), range =c(5,10), name = "Length")+
scale_fill_manual(values = c("#00441b","#41ab5d", "#c7e9c0"), name = "")+
scale_colour_manual(values = c("#969696","#8c510a"), name = "Strand",
labels = c("direct", "compliment"))+
scale_y_continuous(expand = c(0, 0), breaks=c(0,1,2,3),
limits = c (0.5,4.5))+
scale_x_continuous(expand = c(0.01, 0),limits = c(0,30000),breaks=seq(0,30000,2000))+
geom_curve(data = subset(Mechanism_plotDf, Mechanism_plotDf$Origin_position !="") %>%
filter(as.numeric(Origin_position) < Position),
aes(xend= Position, y = num-0.5, x = as.numeric(Origin_position),
yend = num-0.5, color = Mechanism.Igor.),
curvature = -0.4,
lineend = "square",
arrow = arrow(length = unit(0.1,"cm")))+
geom_curve(data = subset(Mechanism_plotDf, Mechanism_plotDf$Origin_position !="") %>%
filter(as.numeric(Origin_position) > Position),
aes(xend= Position, y = num-0.5, x = as.numeric(Origin_position),
yend = num-0.5, color = Mechanism.Igor.),
curvature = 0.4,
lineend = "square",
arrow = arrow(length = unit(0.1,"cm")))+
theme_classic()+
theme(#legend.position = "none",
axis.title = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
plot.margin=unit(c(1,1,0,1), "cm"))
Mechanism_plot
##################################
##Combine with sgRNAs junction data from Kim et al., 2020
template_switch<-subset(Long_insertions_verified, Long_insertions_verified$Origin_position !="")[,c("Position", "Origin_position")]
temp1<-transform(template_switch, Position = as.numeric(Position))
template_switch_num<-transform(temp1, Origin_position = as.numeric(Origin_position))
template_switch_num$five<-with(template_switch_num, pmin(Position,Origin_position))
template_switch_num$three<-with(template_switch_num, pmax(Position,Origin_position))
nh<-100 #Length of neighbourhood to look at
template_switch_num$five_min<-template_switch_num$five - nh
template_switch_num$five_max<-template_switch_num$five + nh
template_switch_num$three_min<-template_switch_num$three - nh
template_switch_num$three_max<-template_switch_num$three + nh
Conditions_list<-as.list(as.data.frame(t(template_switch_num[,c(5:8)]),nrows =8))
#filter the dataset
supporting_reads<-subset(kimdata,
kimdata$five >= Conditions_list[[1]][1] &
kimdata$five <= Conditions_list[[1]][2] &
kimdata$three >= Conditions_list[[1]][3] &
kimdata$three <= Conditions_list[[1]][4])
originalDataConfirmed<-0
for (i in 2:length(Conditions_list)) {
tmp<-subset(kimdata,
kimdata$five >= Conditions_list[[i]][1] &
kimdata$five <= Conditions_list[[i]][2] &
kimdata$three >= Conditions_list[[i]][3] &
kimdata$three <= Conditions_list[[i]][4])
if(dim(tmp)[1] != 0)
{
originalDataConfirmed<-originalDataConfirmed+1
}
supporting_reads<-rbind(supporting_reads,tmp)
}
originalDataConfirmed
###Plot junctions information
supporting_reads_plot<-ggplot()+
geom_curve(data=kimdata,
aes(x= five, y = 0.1,
xend = three,yend = 0.1, size = count),
color ="grey",
alpha =0.5,
curvature = 0.3)+
scale_size(range = c(0.1,2))+
geom_curve(data=supporting_reads,
aes(x= five, y = 0.1,
xend = three,yend = 0.1),
color = "#54278f",
size =0.5,
curvature = 0.3)+
scale_x_continuous(expand = c(0.01, 0),limits = c(0,30000),breaks=seq(0,30000,2000))+
scale_y_continuous(expand = c(0.01, 0), limits = c(-0.5,0.1))+
theme_classic()+
theme(#legend.position = "none",
axis.title = element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_text(color = "white", size =10),
axis.ticks.y = element_line(color = "white"),
plot.margin=unit(c(0,1,1,1), "cm"))
supporting_reads_plot
###########
#Permutation test
###########
Original_data<-template_switch_num[,c(1,2)]
Original_data$experiment<-rep(0, length(Original_data$Position))
##
#Scenario 1: only origin position is selected randomly
results<-vector()
for (j in seq(1,1000)){
Origin_position<-floor(runif(8,min=1, max = 29903))
tmp<-data.frame(Position = Original_data$Position,
Origin_position,
experiment = rep(j, length(Origin_position)))
tmp$five<-with(tmp, pmin(Position,Origin_position))
tmp$three<-with(tmp, pmax(Position,Origin_position))
tmp$five_min<-tmp$five - nh
tmp$five_max<-tmp$five + nh
tmp$three_min<-tmp$three - nh
tmp$three_max<-tmp$three + nh
tmp_list<-as.list(as.data.frame(t(tmp[,c(6:9)]),nrows =8))
check <-0
for (i in 1:length(Conditions_list)) {
checkdf<-subset(kimdata,
kimdata$five >= tmp_list[[i]][1] &
kimdata$five <= tmp_list[[i]][2] &
kimdata$three >= tmp_list[[i]][3] &
kimdata$three <= tmp_list[[i]][4])
if (dim(checkdf)[1] != 0)
{
check<-check+1
}
}
results<-append(results,check)
}
results
##
#Scenario 2: both origin position and insertion position are selected randomly
results_both<-vector()
for (j in seq(1,1000)){
Origin_position<-floor(runif(8,min=1, max = 29903))
Position<-floor(runif(8,min=1, max = 29903))
tmp<-data.frame(Position,
Origin_position)
tmp$five<-with(tmp, pmin(Position,Origin_position))
tmp$three<-with(tmp, pmax(Position,Origin_position))
tmp$five_min<-tmp$five - nh
tmp$five_max<-tmp$five + nh
tmp$three_min<-tmp$three - nh
tmp$three_max<-tmp$three + nh
tmp_list<-as.list(as.data.frame(t(tmp[,c(5:8)]),nrows =8))
check <-0
for (i in 1:length(Conditions_list)) {
checkdf<-subset(kimdata,
kimdata$five >= tmp_list[[i]][1] &
kimdata$five <= tmp_list[[i]][2] &
kimdata$three >= tmp_list[[i]][3] &
kimdata$three <= tmp_list[[i]][4])
if (dim(checkdf)[1] != 0)
{
check<-check+1
}
}
results_both<-append(results_both,check)
}
results_both
##########
#Plot permutations
pvalue_one_end <- length(results[results == 2])/1000
pvalue_both_ends <- length(results[results_both == 2])/1000
#Plot scenario 1
Permutations_one<- ggplot() +
aes(results)+
geom_histogram(binwidth=1, colour="black",
fill = "#08306b")+
geom_vline(xintercept =2, color = "#980043",
size =2)+
annotate("text", x = 1.2 , y =750, label = paste("p-value = ",pvalue_one_end))+
theme_classic()+
ggtitle("1000 permutations of origin site")+
theme(axis.text = element_text(size =10),
title = element_text(size =10),
axis.title.x= element_blank())
#Plot scenario 2
Permutations_both<-ggplot() +
aes(results_both)+
geom_histogram(binwidth=1, colour="black",
fill = "#08306b")+
geom_vline(xintercept =2, color = "#980043",
size =2)+
ggtitle("1000 permutations of both sites")+
annotate("text", x = 1.2 , y =750, label = paste("p-value = ",pvalue_both_ends))+
theme_classic()+
theme(axis.text = element_text(size =10),
title = element_text(size =10),
axis.title.x= element_blank())
#############
#Build Figure 2
Figure2_top<-ggarrange(Mechanism_plot,
SARSCoVGenome_plain,
supporting_reads_plot,
ncol =1,
align = "v",
heights = c(0.5,0.1,0.55),
common.legend = T,
legend = "top")
Figure2_bottom<-ggarrange(NULL, Permutations_one, NULL, Permutations_both, NULL,
widths = c(0.3,1, 0.25, 1,0.3),
ncol = 5,
labels = c("","b","","c",""))
Figure2_full<-ggarrange(Figure2_top,
Figure2_bottom,
labels=c("a",""),
heights = c(1,0.3),
ncol =1)
Figure3_full
#Save Figure
ggsave("../figures/Figure2.svg", plot= Figure3_full,
width = 30, height = 20, dpi =300, units ="cm")
View(Mechanism_plotDf)
##Plot origin
Mechanism_plot<-ggplot(data=Mechanism_plotDf)+
geom_vline(aes(xintercept = Position), linetype = "dashed", color = "#d9d9d9",
alpha=0.5)+
geom_point(aes(x = Position,
size =Length2,
y = num,
fill = Fill),
shape = 25,
color = "black",
alpha =0.7)+
scale_size(breaks = c(9,12,15,21),labels = c(9,12,15,21), range =c(5,10), name = "Length")+
scale_fill_manual(values = c("#00441b","#41ab5d", "#c7e9c0"), name = "")+
scale_colour_manual(values = c("#969696","#8c510a"), name = "Strand",
labels = c("direct", "compliment"))+
scale_y_continuous(expand = c(0, 0), breaks=c(0,1,2,3),
limits = c (0.5,4.5))+
scale_x_continuous(expand = c(0.01, 0),limits = c(0,30000),breaks=seq(0,30000,2000))+
geom_curve(data = subset(Mechanism_plotDf, Mechanism_plotDf$Origin_position !="") %>%
filter(as.numeric(Origin_position) < Position),
aes(xend= Position, y = num-0.5, x = as.numeric(Origin_position),
yend = num-0.5, color = Mechanism.Igor.),
curvature = -0.4,
lineend = "square",
arrow = arrow(length = unit(0.1,"cm")))+
geom_curve(data = subset(Mechanism_plotDf, Mechanism_plotDf$Origin_position !="") %>%
filter(as.numeric(Origin_position) > Position),
aes(xend= Position, y = num-0.5, x = as.numeric(Origin_position),
yend = num-0.5, color = Mechanism),
curvature = 0.4,
lineend = "square",
arrow = arrow(length = unit(0.1,"cm")))+
theme_classic()+
theme(#legend.position = "none",
axis.title = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
plot.margin=unit(c(1,1,0,1), "cm"))
Mechanism_plot
Mechanism_plot<-ggplot(data=Mechanism_plotDf)+
geom_vline(aes(xintercept = Position), linetype = "dashed", color = "#d9d9d9",
alpha=0.5)+
geom_point(aes(x = Position,
size =Length2,
y = num,
fill = Fill),
shape = 25,
color = "black",
alpha =0.7)+
scale_size(breaks = c(9,12,15,21),labels = c(9,12,15,21), range =c(5,10), name = "Length")+
scale_fill_manual(values = c("#00441b","#41ab5d", "#c7e9c0"), name = "")+
scale_colour_manual(values = c("#969696","#8c510a"), name = "Strand",
labels = c("direct", "compliment"))+
scale_y_continuous(expand = c(0, 0), breaks=c(0,1,2,3),
limits = c (0.5,4.5))+
scale_x_continuous(expand = c(0.01, 0),limits = c(0,30000),breaks=seq(0,30000,2000))+
geom_curve(data = subset(Mechanism_plotDf, Mechanism_plotDf$Origin_position !="") %>%
filter(as.numeric(Origin_position) < Position),
aes(xend= Position, y = num-0.5, x = as.numeric(Origin_position),
yend = num-0.5, color = Mechanism),
curvature = -0.4,
lineend = "square",
arrow = arrow(length = unit(0.1,"cm")))+
geom_curve(data = subset(Mechanism_plotDf, Mechanism_plotDf$Origin_position !="") %>%
filter(as.numeric(Origin_position) > Position),
aes(xend= Position, y = num-0.5, x = as.numeric(Origin_position),
yend = num-0.5, color = Mechanism),
curvature = 0.4,
lineend = "square",
arrow = arrow(length = unit(0.1,"cm")))+
theme_classic()+
theme(#legend.position = "none",
axis.title = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
plot.margin=unit(c(1,1,0,1), "cm"))
Mechanism_plot
##Combine with sgRNAs junction data from Kim et al., 2020
template_switch<-subset(Long_insertions_verified, Long_insertions_verified$Origin_position !="")[,c("Position", "Origin_position")]
temp1<-transform(template_switch, Position = as.numeric(Position))
template_switch_num<-transform(temp1, Origin_position = as.numeric(Origin_position))
template_switch_num$five<-with(template_switch_num, pmin(Position,Origin_position))
template_switch_num$three<-with(template_switch_num, pmax(Position,Origin_position))
nh<-100 #Length of neighbourhood to look at
template_switch_num$five_min<-template_switch_num$five - nh
template_switch_num$five_max<-template_switch_num$five + nh
template_switch_num$three_min<-template_switch_num$three - nh
template_switch_num$three_max<-template_switch_num$three + nh
Conditions_list<-as.list(as.data.frame(t(template_switch_num[,c(5:8)]),nrows =8))
#filter the dataset
supporting_reads<-subset(kimdata,
kimdata$five >= Conditions_list[[1]][1] &
kimdata$five <= Conditions_list[[1]][2] &
kimdata$three >= Conditions_list[[1]][3] &
kimdata$three <= Conditions_list[[1]][4])
originalDataConfirmed<-0
for (i in 2:length(Conditions_list)) {
tmp<-subset(kimdata,
kimdata$five >= Conditions_list[[i]][1] &
kimdata$five <= Conditions_list[[i]][2] &
kimdata$three >= Conditions_list[[i]][3] &
kimdata$three <= Conditions_list[[i]][4])
if(dim(tmp)[1] != 0)
{
originalDataConfirmed<-originalDataConfirmed+1
}
supporting_reads<-rbind(supporting_reads,tmp)
}
originalDataConfirmed
###Plot junctions information
supporting_reads_plot<-ggplot()+
geom_curve(data=kimdata,
aes(x= five, y = 0.1,
xend = three,yend = 0.1, size = count),
color ="grey",
alpha =0.5,
curvature = 0.3)+
scale_size(range = c(0.1,2))+
geom_curve(data=supporting_reads,
aes(x= five, y = 0.1,
xend = three,yend = 0.1),
color = "#54278f",
size =0.5,
curvature = 0.3)+
scale_x_continuous(expand = c(0.01, 0),limits = c(0,30000),breaks=seq(0,30000,2000))+
scale_y_continuous(expand = c(0.01, 0), limits = c(-0.5,0.1))+
theme_classic()+
theme(#legend.position = "none",
axis.title = element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_text(color = "white", size =10),
axis.ticks.y = element_line(color = "white"),
plot.margin=unit(c(0,1,1,1), "cm"))
supporting_reads_plot
###########
#Permutation test
###########
Original_data<-template_switch_num[,c(1,2)]
Original_data$experiment<-rep(0, length(Original_data$Position))
##
#Scenario 1: only origin position is selected randomly
results<-vector()
for (j in seq(1,1000)){
Origin_position<-floor(runif(8,min=1, max = 29903))
tmp<-data.frame(Position = Original_data$Position,
Origin_position,
experiment = rep(j, length(Origin_position)))
tmp$five<-with(tmp, pmin(Position,Origin_position))
tmp$three<-with(tmp, pmax(Position,Origin_position))
tmp$five_min<-tmp$five - nh
tmp$five_max<-tmp$five + nh
tmp$three_min<-tmp$three - nh
tmp$three_max<-tmp$three + nh
tmp_list<-as.list(as.data.frame(t(tmp[,c(6:9)]),nrows =8))
check <-0
for (i in 1:length(Conditions_list)) {
checkdf<-subset(kimdata,
kimdata$five >= tmp_list[[i]][1] &
kimdata$five <= tmp_list[[i]][2] &
kimdata$three >= tmp_list[[i]][3] &
kimdata$three <= tmp_list[[i]][4])
if (dim(checkdf)[1] != 0)
{
check<-check+1
}
}
results<-append(results,check)
}
results
##
#Scenario 2: both origin position and insertion position are selected randomly
results_both<-vector()
for (j in seq(1,1000)){
Origin_position<-floor(runif(8,min=1, max = 29903))
Position<-floor(runif(8,min=1, max = 29903))
tmp<-data.frame(Position,
Origin_position)
tmp$five<-with(tmp, pmin(Position,Origin_position))
tmp$three<-with(tmp, pmax(Position,Origin_position))
tmp$five_min<-tmp$five - nh
tmp$five_max<-tmp$five + nh
tmp$three_min<-tmp$three - nh
tmp$three_max<-tmp$three + nh
tmp_list<-as.list(as.data.frame(t(tmp[,c(5:8)]),nrows =8))
check <-0
for (i in 1:length(Conditions_list)) {
checkdf<-subset(kimdata,
kimdata$five >= tmp_list[[i]][1] &
kimdata$five <= tmp_list[[i]][2] &
kimdata$three >= tmp_list[[i]][3] &
kimdata$three <= tmp_list[[i]][4])
if (dim(checkdf)[1] != 0)
{
check<-check+1
}
}
results_both<-append(results_both,check)
}
results_both
##########
#Plot permutations
pvalue_one_end <- length(results[results == 2])/1000
pvalue_both_ends <- length(results[results_both == 2])/1000
#Plot scenario 1
Permutations_one<- ggplot() +
aes(results)+
geom_histogram(binwidth=1, colour="black",
fill = "#08306b")+
geom_vline(xintercept =2, color = "#980043",
size =2)+
annotate("text", x = 1.2 , y =750, label = paste("p-value = ",pvalue_one_end))+
theme_classic()+
ggtitle("1000 permutations of origin site")+
theme(axis.text = element_text(size =10),
title = element_text(size =10),
axis.title.x= element_blank())
#Plot scenario 2
Permutations_both<-ggplot() +
aes(results_both)+
geom_histogram(binwidth=1, colour="black",
fill = "#08306b")+
geom_vline(xintercept =2, color = "#980043",
size =2)+
ggtitle("1000 permutations of both sites")+
annotate("text", x = 1.2 , y =750, label = paste("p-value = ",pvalue_both_ends))+
theme_classic()+
theme(axis.text = element_text(size =10),
title = element_text(size =10),
axis.title.x= element_blank())
#############
#Build Figure 2
Figure2_top<-ggarrange(Mechanism_plot,
SARSCoVGenome_plain,
supporting_reads_plot,
ncol =1,
align = "v",
heights = c(0.5,0.1,0.55),
common.legend = T,
legend = "top")
Figure2_bottom<-ggarrange(NULL, Permutations_one, NULL, Permutations_both, NULL,
widths = c(0.3,1, 0.25, 1,0.3),
ncol = 5,
labels = c("","b","","c",""))
Figure2_full<-ggarrange(Figure2_top,
Figure2_bottom,
labels=c("a",""),
heights = c(1,0.3),
ncol =1)
Figure3_full
#Save Figure
ggsave("../figures/Figure2.svg", plot= Figure2_full,
width = 30, height = 20, dpi =300, units ="cm")
Figure2_full
